/* tslint:disable */
/* eslint-disable */
/**
 * Check man Search engine REST API documentation
 * Official REST documentation for search engine using Elastic search.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: ondrej.chrbolka@upce.cz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Feedback } from '../models';
/**
 * FeedbackSearchV1Api - axios parameter creator
 * @export
 */
export const FeedbackSearchV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find challenge and semesters based on search criteria. For supported operators please visit: https://github.com/jirutka/rsql-parser
         * @param {string} [description] 
         * @param {number} [courseId] 
         * @param {number} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeedback: async (description?: string, courseId?: number, authorId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedbackSearchV1Api - functional programming interface
 * @export
 */
export const FeedbackSearchV1ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find challenge and semesters based on search criteria. For supported operators please visit: https://github.com/jirutka/rsql-parser
         * @param {string} [description] 
         * @param {number} [courseId] 
         * @param {number} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeedback(description?: string, courseId?: number, authorId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Feedback>>>> {
            const localVarAxiosArgs = await FeedbackSearchV1ApiAxiosParamCreator(configuration).getAllFeedback(description, courseId, authorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};

                axios.defaults.headers.get['Access-Control-Allow-Origin'] = '*';
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeedbackSearchV1Api - factory interface
 * @export
 */
export const FeedbackSearchV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Find challenge and semesters based on search criteria. For supported operators please visit: https://github.com/jirutka/rsql-parser
         * @param {string} [description] 
         * @param {number} [courseId] 
         * @param {number} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeedback(description?: string, courseId?: number, authorId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Feedback>>> {
            return FeedbackSearchV1ApiFp(configuration).getAllFeedback(description, courseId, authorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedbackSearchV1Api - object-oriented interface
 * @export
 * @class FeedbackSearchV1Api
 * @extends {BaseAPI}
 */
export class FeedbackSearchV1Api extends BaseAPI {
    /**
     * 
     * @summary Find challenge and semesters based on search criteria. For supported operators please visit: https://github.com/jirutka/rsql-parser
     * @param {string} [description] 
     * @param {number} [courseId] 
     * @param {number} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackSearchV1Api
     */
    public async getAllFeedback(description?: string, courseId?: number, authorId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Feedback>>> {
        return FeedbackSearchV1ApiFp(this.configuration).getAllFeedback(description, courseId, authorId, options).then((request) => request(this.axios, this.basePath));
    }
}
